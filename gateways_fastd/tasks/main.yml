---
# Fastd-Daemon, Haveged-Daemon

- name: check if fastd needs to be installed
  set_fact:
     fastd_on_this_gw: true
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"

- name: install fastd (vpn daemon) and haveged (entropy daemon)
  apt:
    pkg: ['fastd', 'haveged']
    update_cache: yes
    state: present
  when: fastd_on_this_gw is defined and fastd_on_this_gw

- name: Get all enabled fastd instances
  shell: |
    set -o pipefail
    /bin/ls /etc/systemd/system/multi-user.target.wants/fastd@* | grep -oE "[0-9]+"
  args:
    executable: bash
  changed_when: False
  failed_when: False
  check_mode: no
  register: _fastd_domain_instances

- name: Stop and disable obsolete fastd instances
  service:
    name: "fastd@{{ item }}.service"
    enabled: no
    state: stopped
  with_items: "{{ _fastd_domain_instances.stdout_lines }}"
  when: domaenenliste is defined and item not in domaenenliste or
        (domaenenliste[item].fastd is defined and not domaenenliste[item].fastd) or
        (domaenenliste[item].fastd is undefined and domaenenliste[item].fastd_key is undefined)

- name: remove fastd (vpn daemon) and haveged (entropy daemon)
  apt:
    name: ['fastd', 'haveged']
    state: absent
  when: fastd_on_this_gw is not defined or not fastd_on_this_gw

- name: create config directories
  file:
    path: /etc/fastd/{{ item.key }}
    state: directory
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"

- name: create keys directories
  file:
    path: /etc/fastd/{{ item.key }}/keys
    state: directory
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"

- name: write private key to seperate keyfiles, if fastd key is defined as host variable
  template:
    src: secret.key.j2
    dest: /etc/fastd/{{ item.key }}/keys/secret.key
    owner: root
    group: root
    mode: 0600
  when: item.value.fastd_key is defined and not (item.value.fastd is defined and not item.value.fastd)
  vars:
    secretkey: "{{ item.value.fastd_key.secret }}"
  with_dict: "{{ domaenenliste }}"

- name: write public key to seperate keyfiles, if fastd key is defined as host variable
  template:
    src: public.key.j2
    dest: /etc/fastd/{{ item.key }}/keys/public.key
  when: item.value.fastd_key is defined and not (item.value.fastd is defined and not item.value.fastd)
  vars:
    publickey: "{{ item.value.fastd_key.public }}"
  with_dict: "{{ domaenenliste }}"

# generate new fastd keypair if no fastd_key file exists
# new key will only be generated, if no secret,key file exists (public key doesn't matter)
- name: generate fastd key (if not exists)
  command: fastd --generate-key
  register: fastd_key_generated
  args:
    creates: /etc/fastd/{{ item.key }}/keys/secret.key
  when: (item.value.fastd is defined and item.value.fastd) and item.value.fastd_key is undefined
  with_dict: "{{ domaenenliste }}"
  check_mode: no
  notify:
    - restart fastd per domain

- name: write private key to seperate keyfiles, if new fastd key is generated
  template:
    src: secret.key.j2
    dest: /etc/fastd/{{ item.item.key }}/keys/secret.key
    owner: root
    group: root
    mode: 0600
  when: item.changed
  vars:
    secretkey: "{{ item.stdout_lines[0]|replace('Secret: ','') }}"
  with_items: "{{ fastd_key_generated.results }}"

- name: write public private key to seperate keyfiles, if new fastd key is generated
  template:
    src: public.key.j2
    dest: /etc/fastd/{{ item.item.key }}/keys/public.key
  when: item.changed
  vars:
    publickey: "{{ item.stdout_lines[1]|replace('Public: ','') }}"
  with_items: "{{ fastd_key_generated.results }}"

- name: create dummy peer directory
  file:
    path: /etc/fastd/{{ item.key }}/peers
    state: directory
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"

# create dummy peer file
- name: create dummy peer
  template:
    src: dummy.j2
    dest: /etc/fastd/{{ item.key }}/peers/dummy
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"

# create fastd config
- name: create config
  template:
    src: fastd.conf.j2
    dest: /etc/fastd/{{ item.key }}/fastd.conf
  notify:
    - restart fastd per domain
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"

- name: create verify directory
  file:
    path: /var/freifunk/gateway-{{ freifunk.kurzname }}/fastd/
    state: directory
  when: fastd_on_this_gw is defined and fastd_on_this_gw

- name: create verify script (blacklisting)
  template:
    src: blacklist.sh.j2
    dest: /var/freifunk/gateway-{{ freifunk.kurzname }}/fastd/blacklist.sh
  when: fastd_on_this_gw is defined and fastd_on_this_gw

- name: check if global blacklist exists
  stat:
    path: /var/freifunk/gateway-{{ freifunk.kurzname }}/fastd/blacklist
  register: blacklist_file

- name: create global blacklist file (if not exists)
  file:
    path: /var/freifunk/gateway-{{ freifunk.kurzname }}/fastd/blacklist
    state: touch
  when: not blacklist_file.stat.exists and fastd_on_this_gw is defined and fastd_on_this_gw

- name: status.pl nach /root kopieren
  copy:
    src: status.pl
    dest: /root/status.pl
    owner: root
    group: root
    mode: 0755
  when: fastd_on_this_gw is defined and fastd_on_this_gw

- name: create folder for fastd@ service file
  file:
    path: /etc/systemd/system/fastd@.service.d
    state: directory
    mode: 0755
  when: fastd_on_this_gw is defined and fastd_on_this_gw

- name: override fastd@ service
  template:
    src: fastd@.service.override.j2
    dest: /etc/systemd/system/fastd@.service.d/ansible-managed.conf
  register: _domain_fastd_systemd
  when: fastd_on_this_gw is defined and fastd_on_this_gw
  notify:
    - reread systemd configs

- name: create folder for haveged service override file
  file:
    path: /etc/systemd/system/haveged.service.d
    state: directory
    mode: 0755
  when: fastd_on_this_gw is defined and fastd_on_this_gw

- name: override haveged service
  template:
    src: haveged.service.override.j2
    dest: /etc/systemd/system/haveged.service.d/ansible-managed.conf
  register: _domain_fastd_systemd
  when: fastd_on_this_gw is defined and fastd_on_this_gw
  notify:
    - reread systemd configs

- name: enable fastd for each domain
  systemd:
    name: fastd@{{ item.key }}
    enabled: yes
    masked: no
  when: (item.value.fastd is defined and item.value.fastd) or (item.value.fastd is undefined and item.value.fastd_key is defined)
  with_dict: "{{ domaenenliste }}"
  notify:
    - restart fastd per domain
