# {{ ansible_managed }}

# Bind to a fixed address and port, IPv4 and IPv6
bind {{ ansible_default_ipv4.address }}:{{ domaenen[item.key].fastd_port_forced | default(fastd.port_base + (item.key | int)) }} interface "{{ ansible_default_ipv4.interface }}";

{% if ansible_default_ipv6 %}
bind [{{ ansible_default_ipv6.address }}]:{{ domaenen[item.key].fastd_port_forced | default(fastd.port_base + (item.key | int)) }} interface "{{ ansible_default_ipv6.interface }}";
{% endif %}

# Set the user, fastd will work as
user "nobody";

# Set the interface name
interface "fastd{{ item.key }}";

# Set the mode, the interface will work as
mode tap;

# Set the mtu of the interface (salsa2012 with ipv6 will need 1406)
mtu {{ fastd.mtu|default('1406') }};

# Set the methods (aes128-gcm preferred, salsa2012+umac preferred for nodes)
method "aes128-gcm";
method "salsa2012+umac";
method "salsa2012+gmac";
method "null";

# Secret key generated by `fastd --generate-key`
include "/etc/fastd/{{ item.key }}/keys/secret.key";

# Log everything to syslog
log to syslog level warn;

# Hide IP addresses in log output
hide ip addresses yes;

# Include peers from our git-repos
include peers from "/etc/fastd/{{ item.key }}/peers/";

# Status Socket
status socket "/run/fastd-{{ item.key }}/fastd.sock";

# Configure a shell command that is run on connection attempts by unknown peers (true means, all attempts are accepted)
# on verify "true";
on verify "
  /bin/bash /var/freifunk/gateway-{{ freifunk.kurzname }}/fastd/blacklist.sh $PEER_KEY
";

# Configure a shell command that is run when fastd comes up
on up "
  # Add fastd interface to bridge, then enable it
  ip link set dev $INTERFACE master br{{ item.key }} && ip link set dev $INTERFACE up
";
