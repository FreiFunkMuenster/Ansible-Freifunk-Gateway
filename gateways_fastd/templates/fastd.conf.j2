# {{ ansible_managed }}

# Bind to a fixed address and port, IPv4 and IPv6
bind {{ansible_default_ipv4.address}}:{{fastd.port}} interface "{{ansible_default_ipv4.interface}}";

{% if ansible_default_ipv6 %}
bind [{{ansible_default_ipv6.address}}]:{{fastd.port}} interface "{{ansible_default_ipv6.interface}}";
{% endif %}

# Set the user, fastd will work as
user "nobody";

# Set the interface name
interface "mesh-vpn";

# Set the mode, the interface will work as
mode tap;

# Set the mtu of the interface (salsa2012 with ipv6 will need 1406)
mtu {{ fastd.mtu|default('1406') }};

# Set the methods (aes128-gcm preferred, salsa2012+umac preferred for nodes)
method "aes128-gcm";
method "salsa2012+umac";
method "salsa2012+gmac";
method "null";

# Secret key generated by `fastd --generate-key`
include "secret.key";

# Log everything to syslog
log to syslog level debug;

# Include peers from our git-repos
include peers from "/etc/fastd/vpn/peers/";

# Status Socket
status socket "/tmp/fastd-status";

# Configure a shell command that is run on connection attempts by unknown peers (true means, all attempts are accepted)
# on verify "true";
on verify "
  /bin/bash /var/gateway-ffms/fastd/verify.sh $PEER_KEY
";

# Configure a shell command that is run when fastd comes up
on up "
  chmod ugo+rw /tmp/fastd-status
  ip link set dev $INTERFACE address de:ad:be:ef:43:{{server_id}}
  ip link set dev $INTERFACE up
{% for item in domaenenliste|dictsort %}
  batctl -m bat{{item[0]}} if add $INTERFACE
{% endfor %}
";
