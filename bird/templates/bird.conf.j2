# {{ ansible_managed }}

log syslog all;
{% if 'as_router' in groups and 'as_router' in group_names %}
router id {{as_ip}};
{% else %}
router id {{ vm_id }};
{% endif %}

table ffnet;

protocol kernel 'kernel_ffnet' {
        scan time 20;
        import all;
	export filter {
		if net ~ [0.0.0.0/0] then reject;
{% if domaenenliste is defined %}
{% for domaene in domaenenliste|dictsort %}
		if net ~ [{{ domaenen[domaene[0]].ffv4_network }}{ {{- domaenen[domaene[0]].ffv4_network | ipaddr('prefix') + 1 }},32}] then reject;
{% endfor %}
{% endif %}
		accept;
	};
        table ffnet;
        kernel table {% if 'as_router' not in group_names %}42{% else %}254{% endif %};
        device routes;
	persist;
};

protocol direct {
        interface "lo";
        interface "gre-*";
        interface "bck-*";
{% if ffrl_tun is defined %}
        interface "tun-ffrl*";
{% endif %}
{% if ffnw_tun is defined %}
        interface "tun-ffnw*";
{% endif %}
        interface "bat*";
        table ffnet;
}

protocol bfd {
        interface "gre*";
	interface "bck-*";
        multihop {
		passive;
        };
};

protocol device {
        scan time 10;
};

{% if ipv4_direkt_ausleiten is defined and ipv4_direkt_ausleiten %}
protocol static {
        table ffnet;
        preference 1000;
        route 0.0.0.0/0 via {{ ansible_default_ipv4.gateway }};
};
{% endif %}

{% if 'as_router' in groups and 'as_router' in group_names %}
protocol static generate_internetz_default {
	table ffnet;
	preference 1001;
	route 0.0.0.0/0 via {{ as_ip }};
};
{% endif %}

{% if domaenenliste is defined %}
protocol static dhcp_Bereich {
	table ffnet;
{% for domaene in domaenenliste|dictsort %}
	route {{domaenen[domaene[0]].ffv4_network | ipaddr(domaene[1].server_id) | ipaddr('address') }}/32 via "bat{{domaene[0]}}";
{% endfor %}
{% for result in more_specific_routes.results|sort(attribute='item') %}
{% for line in result['stdout_lines'] %}
	{{line}}
{% endfor %}
{% endfor %}
}
{% endif %}

filter freifunk {
{% if ffrl_tun is defined %}
	# FFRL
	if net ~ [185.66.192.0/22+] then accept;
{% endif %}
{% if ffnw_tun is defined %}
	# FFNW
	if net ~ [185.197.132.0/24+] then accept;
{% endif %}

	if net ~ [10.0.0.0/8+] then accept;
{% if not ffrl_tun is defined and not ffnw_tun is defined %}
	if net ~ [0.0.0.0/0] then accept;
{% endif %}

	# interne Tunnel-IPs
	if net ~ [192.168.0.0/16+] then accept;
	reject;
};


protocol ospf {
	table ffnet;
	import filter freifunk;
	export filter {
		if net ~ [192.168.0.0/16+] then reject;
		accept;
	};
	area 0.0.0.0 {
		interface "bat*" {
			stub;
		};
{% for host in groups['gateways']|default([]) %}
{% if hostvars[host].hoster|default('unknown') != hoster|default('unknown') %}
		interface "bck-{{host}}" {
			cost 1000;
		};
{% endif %}
{% endfor %}
{% if additional_ospf_interfaces is defined %}
{% for ospf_interface in additional_ospf_interfaces %}
		interface "{{ospf_interface.interface}}" {
			cost {{ospf_interface.cost}};
		};
{% endfor %}
{% endif %}
		interface "bck-*";
		interface "lo" {
			stub;
		};
	};
};


filter hostroute {
{% if ffrl_nat_ip is defined %}
	if net ~ {{ffrl_nat_ip | ipaddr('address')}}/32 then accept;
{% endif %}
{% if ffnw_nat_ip is defined %}
	if net ~ {{ffnw_nat_ip | ipaddr('address')}}/32 then accept;
{% endif %}
	reject;
};

{% if ffrl_tun is defined or ffnw_tun is defined %}
function is_default() {
	return (net ~ [0.0.0.0/0]);
};

template bgp uplink {
	table ffnet;
	local as {{as_parameters.as_number}};
	import where is_default();
	export filter hostroute;
	next hop self;
	multihop 64;
	default bgp_local_pref 200;
	default bgp_med 1;
};
{% endif %}

template bgp internal {
	table ffnet;
	local as {{as_parameters.as_number}};
	import filter {
		preference = 99;
		accept;
	};
{% if 'as_router' in groups and 'as_router' in group_names %}
	export where source = RTS_STATIC;
{% else %}
	export where source = RTS_BGP;
{% endif %}
	gateway direct;
	direct;
	next hop self;
};

{% if ffrl_tun is defined %}
{% for tun in ffrl_tun %}
protocol bgp ffrl_{{tun.name}} from uplink {
	source address {{ tun.v4_remote | ipaddr( tun.v4_remote.split('.')[3] | int + 1) | ipaddr('address') }};
	neighbor {{tun.v4_remote | regex_replace("^(\d+\.\d+\.\d+\.\d+)/\d+$","\\1")}} as 201701;
{% if "bgp_local_pref" in  tun %}
	default bgp_local_pref {{tun.bgp_local_pref}};
{% endif %}
{% if ffrl_nat_ip is not defined %}
        import filter {
                reject;
        };
        export filter {
                reject;
        };
{% endif %}
};

{% endfor %}
{% endif %}

{% if ffnw_tun is defined %}
{% for tun in ffnw_tun %}
protocol bgp ffnw_{{tun.name}} from uplink {
	source address {{ tun.v4_remote | ipaddr( tun.v4_remote.split('.')[3] | int + 1) | ipaddr('address') }};
	neighbor {{tun.v4_remote | regex_replace("^(\d+\.\d+\.\d+\.\d+)/\d+$","\\1")}} as 206313;
{% if "bgp_local_pref" in  tun %}
	default bgp_local_pref {{tun.bgp_local_pref}};
{% endif %}
};

{% endfor %}
{% endif %}

{% for host in groups['gateways']|default([]) %}
{% if hostvars[host].vm_id != vm_id %}
protocol bgp ibgp_{{host|regex_replace('-','_')}} from internal {
{% if hostvars[host].vm_id < vm_id %}
	neighbor 192.168.{{ hostvars[host].vm_id-1 }}.{{vm_id*2}} as {{as_parameters.as_number}};
{% else %}
	neighbor 192.168.{{ vm_id-1 }}.{{hostvars[host].vm_id*2+1}} as {{as_parameters.as_number}};
{% endif %}
{% if hostvars[host].hoster|default('unknown') != hoster|default('unknown') %}
	import filter {
		preference = 50;
		accept;
	};
{% endif %}

}

{% endif %}
{% endfor %}

{% if 'as_router' in groups and 'as_router' in group_names %}
include "bird_as.conf";
{% endif %}
